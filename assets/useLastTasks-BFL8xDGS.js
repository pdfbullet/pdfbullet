import{r as l}from"./main-0--ghqUF.js";const T="pdfbulletDB",g=2,r="lastTasks",y="signedDocuments";let S=null;const b=()=>(S||(S=new Promise((m,w)=>{const d=indexedDB.open(T,g);d.onerror=()=>w(d.error),d.onsuccess=()=>m(d.result),d.onupgradeneeded=u=>{const t=u.target.result;t.objectStoreNames.contains(r)||t.createObjectStore(r,{keyPath:"id"}),t.objectStoreNames.contains(y)||t.createObjectStore(y,{keyPath:"id"})}})),S),j=()=>{const[m,w]=l.useState([]),[d,u]=l.useState(!0),t=l.useCallback(async()=>{u(!0);try{const i=(await b()).transaction(r,"readonly").objectStore(r),n=await new Promise((c,s)=>{const e=i.getAll();e.onsuccess=()=>c(e.result),e.onerror=()=>s(e.error)});w(n.sort((c,s)=>s.timestamp-c.timestamp))}catch(a){console.error("Failed to load tasks from IndexedDB",a)}finally{u(!1)}},[]),p=l.useCallback(async()=>{try{const o=(await b()).transaction(r,"readwrite"),i=o.objectStore(r),n=Date.now()-7200*1e3,c=i.openCursor();c.onsuccess=s=>{const e=s.target.result;e&&(e.value.timestamp<n&&i.delete(e.primaryKey),e.continue())},await new Promise((s,e)=>{o.oncomplete=()=>s(),o.onerror=()=>e(o.error)})}catch(a){console.error("Failed to cleanup old tasks",a)}},[]);l.useEffect(()=>{p().then(t)},[t,p]);const f=l.useCallback(async a=>{const o=Date.now(),i={...a,id:o,timestamp:o};try{const s=(await b()).transaction(r,"readwrite").objectStore(r);await new Promise((e,D)=>{const k=s.add(i);k.onsuccess=()=>e(),k.onerror=()=>D(k.error)}),await t()}catch(n){console.error("Failed to add task to IndexedDB",n)}},[t]),x=l.useCallback(async a=>{try{const n=(await b()).transaction(r,"readwrite").objectStore(r);await new Promise((c,s)=>{const e=n.delete(a);e.onsuccess=()=>c(),e.onerror=()=>s(e.error)}),await t()}catch(o){console.error("Failed to delete task from IndexedDB",o)}},[t]);return{tasks:m,loading:d,addTask:f,deleteTask:x}};export{b as g,j as u};
